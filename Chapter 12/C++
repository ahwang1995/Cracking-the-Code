C++ Notes

Inheritance ex:
	class Person{
		...
		void func(){

		}
	};
	class Student: public Person{
		public:
			...
			void func(){
				...
			}
	};
	int main(){
		Student* p = new Student();
		p->func(); //uses the function within student
		delete p; //deletes allocated memory
	}

Constructor ex:
	//for primitive types
	Person(int a){
		id = a;
	}
	//so that id is created before the object or constructor code
	Person(int a) : id(a){

	}
	//deconstructor
	~Person(){
		delete obj;
	}

Virtual Functions
	class Person{
		virtual void func(){
			...
		}
	};

	//if a pure virtual function is put in the parent class, it cannot be instantiated
	//a virtual functin can be used if two classes inherent parent, but have different implementations
	//of the same method

	//A virtual deconstructor should be used so that the child class's data is also deleted, not just the parent
	class Person{
		virtual ~Person(){
			...
		}
	};
	class Student: public Person{
		public:
			~Student(){

			}
	};

	//default values should be on the right side
	Default Values ex:
		int func(int a,int b = 3){
			x = a
			y = b
			return a + b;
		}

	Operator overloading ex:
		//allows use of operator signs on objects that normally wouldn't allow it by overriding the function
		Bookshelf Bookshelf::operator+(Bookshelf &other){...}

	Pointers and References
		format
			Pointers
				int * p = new int;
				*p = 7;
				int * q = p;
				*p = 8;
			References
				//a reference does not have it's own memory, it modifies existing objects
				int a = 5;
				int & b = a;
				b = 7;

				//free standing reference
				//allocates memory to store 12 and and makes b a reference to this
				const int & b = 12;
				//references cannot be reassigned to other memory and can't be null

			Pointer arithmetic
			int * p = new int[2];
			p[0] = 0;
			p[1] = 1;
			p++;
			//p++ increments the memory by p + size(int) bytes so printing *p outputs 1

			Templates
			//a template reuses the same code to apply the same class to different data types
			template <class T> class ShiftedList{
			}

12.1: print the last K lines of an input file using C++
	Use a circular array in order to print the last 12 lines, with each new element replacing an old one, at the end
	print the whole array starting from the next spot to be overridden

	ex:
		void printlast10(char* fileName){
			const int K = 10
			ifstream file (fileName);
			string L[K];
			int size = 0;

			/* read file line by line and input into the circular array, use peek so that
			an end of file line is not considered a line*/
			while(file.peek() != EOF){
				getline(file,L[size%K])
				size++
			}
			//if the file is less than K lines then start from 0, else get the start of the first of
			//the last 12 lines
			int start = size > K ? (size%K) : 0;
			//size of the array
			int count = min(K,size);
			//print lines in order
			for(int i = i;i<count;i++){
				cout <<  L[(start + i) % K] << endL;
			}

		}

12.2 function void reverse(char* str) which reverses a null-terminated string
	void reverse(char *str){
		char *end = str;
		char tmp;
		//find the end of the string (null value)
		if(str){
			while(*end){
				++end;
			}
			--end;
			//uses post increment and decrement
			while(str < end){
				tmp = *str
				*str++ = *end;
				*end-- = tmp;
			}
		}
	}

12.3 Compare and contrast a hash table and a stl map.
	Hashtables store values by calling a hash function on a key. These values are not sorted.
	Since keys are used, an insert or lookup is done in O(1) time, assuming few collisions.
	Collisions are commonly dealt with by using linked lists, which store all of the values mapped
	to a particular key. An STL map inserts the pairs into a balanced binary tree, so inserts and lookups
	are O(log N).

	Hashtables
		Hashtables are commonly implemented using an array of linked lists. There are two keys used,
		the hashkey gets the index of the array while a more specific key matches the particular
		element in the linked list. 
		Try to avoid collisions with a good hash function. There will still be collisions, so the must
		be handeled, commonly by using linked lists. There should also be a function to dynamically resize
		the hash table depending on the ratio of elements in the table and the size. This requires transferring
		elements into another hash table, which is expensive and should not be done too often.

	STLMap
		When the number of inputs is small an STLmap or binary tree can be used, as O(log N) time will be negligible

12.4 How do virtual funcions work in C++?
	virtual functions use a vtable which stores the address of the virtual function of the class. There is also a hidden
	vptr variable which points to the vtable of the class. If the virtual function is not ovverridden, then the vtable
	stores the addresses of the function in the parent class. When the virtual function is called, the vtable is used to
	resolve the addresses. When the derived class object is assigned to the base class pointer, vptr points to the vtable
	of the derived class rather than the parent. This is shown in one of the above examples.

12.5 What is the difference between a shallow copy and a deep copy?
	A shallow copy copies the member values from one object to another while a deep copy also copies pointer objects
	ex:
		struct Test{
			char * ptr;
		};
		void shallow_copy(Test & src, Test & dest){
			dest.ptr = src.ptr;
		}
		void deep_copy(Test & src, Test & dest){
			dest.ptr = (char*)malloc(strlen(src.len(srcptr))+1);
			strcpy(dest.ptr,src.ptr);
		}
		//shallow copy can cause runtime errors due to the creation and deletion of objects

12.6 What is the significance of the keyword "volatile in C++"
	Volatile signifys that a variable can be changed on the outside, without update to the code. For example
	by the operating system, hardware, or thread. Because of this the compiler will reload it every time from
	memory. Volatile variables can be used to break out of infinite loops.


